

   // --------DELETION IN BINARY SEARCH TREE--------

#include "bits/stdc++.h"
using namespace std;

 struct Node{
     int data;
     Node*left;
     Node*right;
     
      Node(int val){
         data = val;
         left= NULL;
         right= NULL;
     }
 };
 
 
    Node* ino_order_succ(Node*root){
        Node*curr = root;
        while(curr && curr->left != NULL){
            curr = curr->left;
            
        }
        
        return curr;
    }
 
//   ----------delete function for BST--------------

    Node*delete_in_bst(Node* root, int key){
        
        
        // data > key--------
        
         if(root->data > key){
            return delete_in_bst(root->left, key);
        }
        
        // data < key---------
        
    else if(root->data < key){
         return delete_in_bst(root->right ,key);
    }     
    
    else {
        if(root->left == NULL){
            Node*temp = root->right;
            free(root);
            return temp;
        }
        else if(root->right == NULL){
            Node*temp = root->left;
            free(root);
           return temp;
    }
       
    //   case 3-----------
    
        Node*temp = ino_order_succ(root->right);
        root->data=temp->data;
root->right = delete_in_bst(root->right , temp->data);
    }
  return root;
    }
    
    // inorder function--------------
    
  void  inorder(Node*root){
      if(root==NULL){
          return;
      }
      inorder(root->left);
      cout<<root->data<<" ";
      inorder(root->right);
  }

 int main()
{
   Node*root = new Node(4);
   root->left = new Node(2);
   root->right = new Node(5);
   root->left->left = new Node(1);
   root->left->right = new Node(3);
   root->right->right = new Node(6);
 
 inorder(root);
 cout<<endl;
 root = delete_in_bst(root, 5);
 inorder(root);
 cout<<endl;

    return 0;
}
